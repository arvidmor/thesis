@article{NeRTA,
  author = {Yaacoub, Ahmed El and Mottola, Luca and Voigt, Thiemo and R\"{u}mmer, Philipp},
  title = {Scheduling Dynamic Software Updates in Mobile Robots},
  year = {2023},
  issue_date = {November 2023},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {22},
  number = {6},
  issn = {1539-9087},
  url = {https://doi.org/10.1145/3623676},
  doi = {10.1145/3623676},
  abstract = {We present NeRTA (Next Release Time Analysis), a technique to enable dynamic software updates for low-level control software of mobile robots. Dynamic software updates enable software correction and evolution during system operation. In mobile robotics, they are crucial to resolve software defects without interrupting system operation or to enable on-the-fly extensions. Low-level control software for mobile robots, however, is time sensitive and runs on resource-constrained hardware with no operating system support. To minimize the impact of the update process, NeRTA safely schedules updates during times when the computing unit would otherwise be idle. It does so by utilizing information from the existing scheduling algorithm without impacting its operation. As such, NeRTA works orthogonal to the existing scheduler, retaining the existing platform-specific optimizations and fine-tuning, and may simply operate as a plug-in component. To enable larger dynamic updates, we further conceive an additional mechanism called bounded reactive control and apply mixed-criticality concepts. The former cautiously reduces the overall control frequency, whereas the latter excludes less critical tasks from NeRTA processing. Their use increases the available idle times. We combine real-world experiments on embedded hardware with simulations to evaluate NeRTA. Our experimental evaluation shows that the difference between NeRTA’s estimated idle times and the measured idle times is less than 15\% in more than three-quarters of the samples. The combined effect of bounded reactive control and mixed-criticality concepts results in a 150+\% increase in available idle times. We also show that the processing overhead of NeRTA and of the additional mechanisms is essentially negligible.},
  journal = {ACM Trans. Embed. Comput. Syst.},
  month = {11},
  articleno = {99},
  numpages = {27},
  pages = {1--27},
  keywords = {Dynamic software updates, mobile robotics, safety-critical systems, aerial drones}
}

@manual{fr5994DataSheet,
  organization  = {Texas Instruments},
  note          = {Revised January 2021},
  title         = {MSP430FR599x, MSP430FR596x Mixed-Signal Microcontrollers},
  type          = {Datasheet},
  year          = {2016},
  month         = {3},
  number        = {SLASE54D},
  url           = {https://www.ti.com.cn/lit/gpn/MSP430FR5962},
}

@report{framReport,
  author      = {Thanigai, Priya and Goh, William},
  date        = {2012-03},
  institution = {Texas Instruments},
  title       = {MSP430™ FRAM Quality and Reliability},
  type        = {Application Report},
  year        = {2012}
}

@InProceedings{dynUpdateFramework,
  author = {Wahler, Michael and Richter, Stefan and Oriol, Manuel},
  title = {Dynamic software updates for real-time systems},
  year = {2009},
  isbn = {9781605587233},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/1656437.1656440},
  doi = {10.1145/1656437.1656440},
  abstract = {Seamlessly updating software in running systems has recently gained momentum. Dynamically updating the software of real-time embedded systems, however, still poses numerous challenges: such systems must meet hard deadlines, cope with limited resources, and adhere to high safety standards.This paper presents a solution for updating component-based cyclic embedded systems without violating real-time constraints. In particular, it investigates how to identify points in time at which updates can be performed and how to transfer the state of a component to a new version of the same component. We also present experimental results to validate the proposed solution.},
  booktitle = {Proceedings of the 2nd International Workshop on Hot Topics in Software Upgrades},
  articleno = {2},
  numpages = {6},
  pages    = {1--6},
  keywords = {real-time, embedded, dynamic software update},
  location = {Orlando, Florida},
  series = {HotSWUp '09}
}

@InProceedings{resourceConstrained,
author="Felser, Meik
and Kapitza, R{\"u}diger
and Klein{\"o}der, J{\"u}rgen
and Schr{\"o}der-Preikschat, Wolfgang",
editor="Rettberg, Achim
and Zanella, Mauro C.
and D{\"o}mer, Rainer
and Gerstlauer, Andreas
and Rammig, Franz J.",
title="Dynamic Software Update of Resource-Constrained Distributed Embedded Systems",
doi = {10.1007/978-0-387-72258-0_33},
booktitle="Embedded System Design: Topics, Techniques and Trends",
year="2007",
publisher="Springer US",
address="Boston, MA",
pages="387--400",
isbn="978-0-387-72258-0"
}

@InProceedings{dsuEnhancer,
author="Kim, Dong Kwan
and Kim, Won-Tae
and Park, Seung-Min",
editor="Kim, Tai-hoon
and Adeli, Hojjat
and Stoica, Adrian
and Kang, Byeong-Ho",
title="DSUENHANCER: A Dynamic Update System for Resource-Constrained Software",
booktitle="Control and Automation, and Energy System Engineering",
year="2011",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="195--201",
abstract="Dynamic Software Update (DSU) is an advanced software practice to change a running program with imposing negligible service interruption while updating. In this paper, we present DSUEnhancer, a DSU implementation for resource-constrained C programs like embedded software. DSUEnhancer generates a patch file off-line and loads it into the dynamic memory of an updated program on-line. In particular, DSUEnhancer is relatively lightweight in terms of memory and CPU usage and runs on the ARM architecture with the gcc cross compiler.",
isbn="978-3-642-26010-0",
doi = {https://doi.org/10.1007/978-3-642-26010-0_24}
}


@misc{hackflight,
	author = {simondlevy},
	title = {Hackflight},
	journal = {GitHub},
	year = {2024},
	month = {2},
	note = {[Online; accessed 15. Feb. 2024]},
	url = {https://github.com/simondlevy/Hackflight}
}

@article{dsuChallenges,
  title={Challenges in Dynamic Software Updating},
  author={Danijel Mlinari{\'c}},
  journal={TEM Journal},
  year={2020},
  volume={9},
  pages={117-128},
  issn = {2217-8309},
  doi = {10.18421/TEM91-17},
  url={https://api.semanticscholar.org/CorpusID:216367500}
}

@thesis{Kilpelainen2023,
	author = {Kilpeläinen, Heikki},
  institution = {Metroplia University of Applied Sciences},
	title = {{Dynamic firmware updating of an embedded system}},
	year = {2023},
  month = {2},
	url = {https://urn.fi/URN:NBN:fi:amk-202303173785},
}

@article{BSDiff,
  author            = {Percival, Colin},
  date              = {2003},
  title             = {Naive differences of executable code},
  year              = {2003},
  url               = {https://www.daemonology.net/bsdiff/},
}

@manual{msp430Flash,
  organization  = {Texas Instruments},
  note          = {Revised August 2012},
  title         = {MSP430F22x2 MSP430F22x4 Mixed-Signal Microcontrollers},
  type          = {Datasheet},
  year          = {2006},
  month         = {7},
  number        = {SLAS504G},
  url           = {https://www.ti.com.cn/cn/lit/ds/slas504g/slas504g.pdf},
}

@report{framSpeed,
  author      = {Thanigai, Priya and Goh, William},
  date        = {June 2011},
  organization = {Texas Instruments},
  title       = {Maximizing Write Speed on the MSP430™ FRAM},
  type        = {Application Report},
  year        = {2011}
}

@report{framOverview,
  organization      = {Fujitsu Semiconductor Memory Solution Ltd.},
  title             = {FRAM Overview and Usage (WhitePaper)},
  type              = {WhitePaper},
  year              = {2021},
  month             = {2},
  url               = {https://www.fujitsu.com/jp/group/fsm/en/documents/products/feram/features/FRAM_overview_usage_whitepaper_e.pdf},
}

@phdThesis{dymos,
  author = {Lee, Insup},
  title = {DYMOS: A Dynamic Modification System},
  school = {University of Wisconsin},
  year = {1983},
  abstract = {DYMOS supports a single programmer modifying a module-based program dynamically (that is, without stopping its execution).  In DYMOS, the programmer modifies and recompiles the source code of procedures and modules that need to be replaced.  The programmer then requests the system to change the current core image to incorporate new code and data.  New object code is inserted by a dynamic modification process that is executed in parallel with other user processes.
Traditionally, modifications to running programs have been done by patching machine code.  Our approach has several advantages over traditional machine code patching.  For example, the current source code always represents the machine code in execution.  In particular, only changes that will leave the program compiletime correct are allowed.  Furthermore, the programmer need not know the details of the machine code generated by a compiler.  Finally, it is easier to determine what part of the program to modify.
We first describe DYMOS.  We then discuss how changes to a running program can be carried out in incremental steps.  Finally, we propose an architecture that supports the synchronization and mutual exclusion capabilities necessary for dynamic modification.},
  url = {https://web.archive.org/web/20030916031953/http://www.cis.upenn.edu/~lee/mydissertation.doc}
}

@book{erlangBook,
author = {Virding, Robert and Wikstr\"{o}m, Claes and Williams, Mike and Armstrong, Joe},
title = {Concurrent programming in ERLANG (2nd ed.)},
year = {1996},
isbn = {013508301X},
publisher = {Prentice Hall International (UK) Ltd.},
address = {GBR},
pages = {121--123},
}

